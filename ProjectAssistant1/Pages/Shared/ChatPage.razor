@page "/ChatPage"

@using Microsoft.AspNetCore.SignalR.Client
@using System.Diagnostics

@inject IJSRuntime JSRuntime

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IWorkspaceRepositoryAsync WorkspaceRepository
@inject IWorkspaceUserRepository WorkspaceUserRepository
@inject IChatRoomRepository ChatRoomRepository
@inject NavigationManager NavigationManager

<h1>Chat</h1>
<hr />
<br />

@if(workspaceUserList.Count == 0)
{
    <div>포함되어 있는 워크스페이스가 없습니다.</div>
}
else
{
    @if (workspaceUser == null)
    {
        <div>로딩중...</div>
    }
    else
    {
        <select class="form-select" @onchange="OnWorkspaceChanged">
            @foreach (var item in workspaceUserList)
            {
                <option value="@item.Workspace.Id">@item.Workspace.Name</option>
            }
        </select>

        <!--ChatRoom 추가 삭제 버튼-->
        <div class="top-row px-4 auth">
            @if (workspaceUser.TaskCreationPermission)
            {
                <button type="button" class="btn btn-primary" style="margin-right:10px" 
                @onclick="ShowAddChatRoomDialogButton">Add new ChatRoom</button>
                <button type="button" class="btn btn-danger">Delete ChatRoom</button>
            }
        </div>
    }

    <hr />

    <section>
        <div class="container py-5">

            <div class="row">

                <!--채팅 리스트-->
                <div class="col-md-6 col-lg-7 col-xl-8" >
                    @if (selectedChatRoom != null )
                    {
                        <h5 class="font-weight-bold mb-3 text-center text-lg-start">@selectedChatRoom.Name</h5>
                        <ul class="list-unstyled">
                            @foreach (Chat c in messages)
                            {
                                <li class="d-flex justify-content-between mb-4">
                                    <img src="/images/default-user-icon.png" alt="avatar"
                                         class="rounded-circle d-flex align-self-start me-3 shadow-1-strong" width="60">
                                    <div class="card">
                                        <div class="card-header d-flex justify-content-between p-3">
                                            <p class="fw-bold mb-0">@c.User.UserName</p>
                                            <p class="text-muted small mb-0"><i class="far fa-clock"></i>time</p>
                                        </div>
                                        <div class="card-body">
                                            <p class="mb-0">
                                                @c.Text
                                            </p>
                                        </div>
                                    </div>
                                </li>
                            }
                            
                            <li class="bg-white mb-3">
                                <div data-mdb-input-init class="form-outline">
                                    <textarea class="form-control bg-body-tertiary" id="textAreaExample2" rows="4" @bind="userInput">
                                    </textarea>
                                    <label class="form-label" for="textAreaExample2">Message</label>
                                </div>
                            </li>
                            <button type="button" @onclick="SendMessage" 
                                data-mdb-button-init data-mdb-ripple-init class="btn btn-info btn-rounded float-end">
                                Send</button>
                        </ul>
                    }
                    else 
                    {
                        <h5 class="font-weight-bold mb-3 text-center text-lg-start">채팅방을 선택해 주세요</h5>
                    }
                    

                </div>

                <!--사이드 리스트(채팅방과 유저 리스트 표시)-->
                <div class="col-md-6 col-lg-5 col-xl-4 mb-4 mb-md-0">
                    <!--채팅방 리스트-->
                    <h5 class="font-weight-bold mb-3 text-center text-lg-start">chat rooms</h5>
                    <div class="card">
                        <div class="card-body">

                            <ul class="list-unstyled mb-0">
                                @if (chatRoomList != null)
                                {
                                    @foreach(var chatRoom in chatRoomList)
                                    {
                                        @if (!chatRoom.IsDeleted)
                                        {
                                            <li class="p-2 border-bottom bg-body-tertiary" @onclick="() => ClickChatRoom(chatRoom)">
                                            <div class="d-flex flex-row" style="align-items:center;">
                                                    <div class="pt-1">
                                                    <p class="fw-bold mb-0"><Icon Name="IconName.ChatLeftDots"></Icon> @chatRoom.Name</p>
                                                    @* <p class="small text-muted">Hello, Are you there?</p> *@
                                                </div>
                                            </div>
                                            @* <div class="pt-1">
                                                <p class="small text-muted mb-1">Just now</p>
                                                <span class="badge bg-danger float-end">1</span>
                                            </div> *@
                                            </li>
                                        }
                                    }
                                }
                            </ul>

                        </div>
                    </div>
                    <br />
                    <!--유저 리스트-->
                    <h5 class="font-weight-bold mb-3 text-center text-lg-start">users</h5>
                    <div class="card">
                        <div class="card-body">

                            <ul class="list-unstyled mb-0">
                                @foreach(var workspaceUser in selectedWorkspaceUsers)
                                {
                                    <li class="p-2 border-bottom bg-body-tertiary">
                                        <div class="d-flex flex-row">
                                            <img src="/images/default-user-icon.png" alt="avatar"
                                                    class="rounded-circle d-flex align-self-center me-3 shadow-1-strong" width="25">
                                            <div class="pt-1" style="text-align:center">
                                                <p class="fw-bold mb-0">@workspaceUser.User.UserName</p>
                                            </div>
                                        </div>
                                    </li>
                                }
                            
                            </ul>

                        </div>
                    </div>
                </div>

            </div>

        </div>
    </section>

    @if (isShowAddChatRoomDialog)
    {
        <div class="modal fade show" tabindex="-1" role="dialog" style="display:block;">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Add ChatRoom</h5>
                    </div>
                    <div class="modal-body">
                        <label>이름:</label>
                        <input type="text" @bind="@newChatRoom.Name" />
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" @onclick="AddChatRoomDialogButton">Save</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseWorkDetailDialogButton">Close</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop show"></div>
    }
}



@code {
    private HubConnection hubConnection; // SignalR 허브 연결용
    private List<Chat> messages = new List<Chat>();
    private string userInput;

    private WorkspaceUser workspaceUser = null; // 현재 사용자의 워크스페이스 사용자 정보

    private List<WorkspaceUser> workspaceUserList = new List<WorkspaceUser>();
    private List<WorkspaceUser> selectedWorkspaceUsers = new List<WorkspaceUser>();
    private int selectedWorkspaceId = -1;
    private ChatRoom selectedChatRoom = null;

    private List<ChatRoom> chatRoomList = null;
    private List<Chat> chats = null;

    private bool isShowAddChatRoomDialog = false;

    private ChatRoom newChatRoom = new ChatRoom();

    AuthenticationState authState;
    ClaimsPrincipal user;

    protected override async Task OnInitializedAsync()
    {
        // AuthenticationStateProvider.GetAuthenticationStateAsync() 메서드는
        // 현재 인증 상태를 나타내는 AuthenticationState 객체를 비동기적으로 반환하는 메서드다.
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            // 로그인 안된 경우
            NavigationManager.NavigateTo("Identity/Account/Login");
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:44307/chathub")
            .WithAutomaticReconnect()
            .Build();

        hubConnection.HandshakeTimeout = TimeSpan.FromSeconds(30);

        // 서버로 부터 받은 메시지 핸들러 등록
        hubConnection.On<Chat>("ReceiveMessage", (chatMessage) =>
        {
            Debug.WriteLine("Receive Message");
            messages.Add(chatMessage);
            InvokeAsync(StateHasChanged);

        });

        hubConnection.On<IEnumerable<Chat>>("LoadMessages", async (loadedMessages) =>
        {
            Debug.WriteLine("Loaded Messages");
            
            foreach (var msg in loadedMessages)
            {
                Debug.WriteLine(msg.Text);
                messages.Add(msg);
            }
            await InvokeAsync(StateHasChanged);

        });

        await hubConnection.StartAsync();

        await LoadWorkspaceUserAsync();
    }

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }

    protected async Task OnWorkspaceChanged(ChangeEventArgs e)
    {
        selectedWorkspaceId = int.Parse(e.Value.ToString());
        selectedWorkspaceUsers = await WorkspaceUserRepository.GetWorkspaceUserByWorkspaceId((int)selectedWorkspaceId);

        await LoadChatServiceAsync();
    }

    protected async Task LoadWorkspaceUserAsync()
    {
        workspaceUserList = 
            await WorkspaceUserRepository.GetWorkspaceUserByUserId(user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value);
        if (workspaceUserList.Count > 0)
        {
            selectedWorkspaceId = workspaceUserList[0].WorkspaceId;
            selectedWorkspaceUsers = await WorkspaceUserRepository.GetWorkspaceUserByWorkspaceId((int)selectedWorkspaceId);
        }

        workspaceUser = 
            await WorkspaceUserRepository.GetWorkspaceUserByWorkspaceIdUserId(
                user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value, selectedWorkspaceId);


        await LoadChatServiceAsync();
    }

    protected async Task LoadChatServiceAsync()
    {
        // 선택된 워크스페이스를 사용하는 코드
        chatRoomList = await ChatRoomRepository.GetChatRoomByWorkspaceId(selectedWorkspaceId);
        selectedChatRoom = null;
    }

    #region 챗룸 추가 삭제 함수
    protected void ShowAddChatRoomDialogButton()
    {
        isShowAddChatRoomDialog = true;
    }

    protected async Task AddChatRoomDialogButton()
    {
        if (    newChatRoom.Name == null)
        {
            newChatRoom.Name = "미정";
        }
        newChatRoom.WorkspaceId = selectedWorkspaceId;
        newChatRoom.IsDefault = false;
        await ChatRoomRepository.AddChatRoomAsync(newChatRoom);

        newChatRoom = new ChatRoom();
        isShowAddChatRoomDialog = false;

        await LoadChatServiceAsync();
    }

    protected void CloseWorkDetailDialogButton()
    {
        newChatRoom = new ChatRoom();
        isShowAddChatRoomDialog = false;
    }

    private async Task ClickChatRoom(ChatRoom cr)
    {
        if (selectedChatRoom != null)
        {
            await hubConnection.SendAsync("LeaveRoom", selectedChatRoom);
        }
        selectedChatRoom = cr;
        await JoinRoom();
    }
    #endregion



    #region SignalR 함수
    // 사용법 공부하면서 사용
    // SendMessage() 대신 아래 함수를 사용!
    private async Task JoinRoom()
    {
        if (hubConnection.State == HubConnectionState.Connected)
        {
            Debug.WriteLine(selectedChatRoom.Name);
            await hubConnection.SendAsync("JoinRoom", selectedChatRoom);
        }
        else
        {
            // 연결이 활성 상태가 아닐 때의 처리
            // 예를 들어, 연결을 재시도하거나 사용자에게 알림을 표시할 수 있습니다.
            Debug.WriteLine("connection error"); // Alert
        }
    }

    private async Task SendMessage()
    {
        if (hubConnection.State == HubConnectionState.Connected)
        {
            if (!string.IsNullOrEmpty(userInput))
            {
                await hubConnection.SendAsync("SendMessageToChatRoom", 
                    selectedChatRoom, user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value,  userInput);
                Debug.WriteLine(messages.Count);
                userInput = string.Empty;
            }
        
        }
    }
    #endregion
    
}
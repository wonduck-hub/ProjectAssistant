@page "/SchedulePage"

@using Microsoft.AspNetCore.SignalR.Client
@using System.Diagnostics
@using System.IO
@using OpenCvSharp
@using BlazorScheduler
@using BlazorDateRangePicker
@using MudBlazor

@inject IJSRuntime JSRuntime

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IWorkspaceRepositoryAsync WorkspaceRepository
@inject IWorkspaceUserRepository WorkspaceUserRepository
@inject IChatRoomRepository ChatRoomRepository
@inject NavigationManager NavigationManager
@inject IVotRepository VotRepository
@inject IVotesRepository VotesRepository
@inject IUserRepositoryAsync UserRepository
@inject IUserWorkRepository UserWorkRepository
@inject IPersonalScheduleRepository PersonalScheduleRepository
@inject IDialogService DialogService

<h1>Schedule</h1>

<button type="button" class="btn btn-primary" @onclick="ShowAddScheduleDialogButton">Add schedule</button>
<br />
<hr />

<Scheduler EnableRescheduling="false">
    <Appointments>
        @foreach (var app in _appointments)
        {
            <Appointment Start="@app.Start" End="@app.End" Color="@app.Color" OnClick="() => ShowScheduleDetail(app)">
                @app.Class
            </Appointment>
        }
    </Appointments>
</Scheduler>

@if (isShowAddScheduleDialog)
{
    <div class="modal fade show" tabindex="-1" role="dialog" style="display:block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add new schedule</h5>
                </div>
                <div class="modal-body">
                    <label>스케줄 이름:</label>
                    <input type="text" @bind="newPersonalSchedule.Name" />
                    <br />
                    <label>기간:</label>
                    <DateRangePicker @bind-StartDate="newPersonalSchedule.StartDate" @bind-EndDate="newPersonalSchedule.EndDate" />
                    <br />
                    <label>설명:</label>
                    <br />
                    <textarea @bind="newPersonalSchedule.TaskDetails" rows="5" cols="35" placeholder="Detail..." style="resize:none;"></textarea>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="AddScheduleButton">Add</button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseAddScheduleDialogButton">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}

@if (isShowScheduleDetail)
{
    <div class="modal fade show" tabindex="-1" role="dialog" style="display:block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Detail</h5>
                </div>
                <div class="modal-body">
                    <label>작업 이름:</label>
                    <input type="text"/>
                    <br />
                    <label>기간:</label>
                    <DateRangePicker/>
                    <br />
                    <label>설명:</label>
                    <br />
                    <textarea rows="5" cols="35" placeholder="Detail..." style="resize:none;"></textarea>
                    <br />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success" @onclick="UpdateScheduleDialogButton">Save</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteScheculeDialogButton">Delete</button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseScheduleDetailDialogButton">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}

@code {

    AuthenticationState authState;
    ClaimsPrincipal user;

    #region 변수들
    private User thisUser;
    #endregion

    #region 일정 관련 변수들
    private List<MyAppointment> _appointments = new();
    private bool isShowAddScheduleDialog = false;

    private PersonalSchedule newPersonalSchedule = new();

    private bool isShowScheduleDetail = false;
    #endregion

    protected override async Task OnInitializedAsync()
    {
        // AuthenticationStateProvider.GetAuthenticationStateAsync() 메서드는
        // 현재 인증 상태를 나타내는 AuthenticationState 객체를 비동기적으로 반환하는 메서드다.
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            // 로그인 안된 경우
            NavigationManager.NavigateTo("Identity/Account/Login");
        }

        thisUser = await UserRepository.GetUserByIdAsync(user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value);

        await LoadSchedules();
    }

    private async Task LoadSchedules()
    {
        _appointments.Clear();

        // Workspace에서 할당된 작업들 로드
        List<UserWork> userWorks = await UserWorkRepository.GetUserWorkByUserIdAsync(thisUser.Id);
        List<PersonalSchedule> personalSchedules = await PersonalScheduleRepository.GetPersonalScheduleByUserId(thisUser.Id);

        string[] colors = { "aqua", "fuchsia", "green", "yellow", "red", "silver" };

        int i = 0;
        foreach (UserWork userWork in userWorks)
        {
            if (!userWork.Work.IsDeleted)
            {
                MyAppointment app = new()
                    {
                        Start = userWork.Work.StartDate.Value.UtcDateTime,
                        End = userWork.Work.EndDate.Value.UtcDateTime,
                        Class = userWork.Work.Name,
                        Color = colors[i % colors.Length],
                        IsWorkspaceWork = true
                    };
                _appointments.Add(app);
            }
            ++i;
        }
        i = 0;
        foreach (PersonalSchedule s in personalSchedules)
        {
            if (!s.IsDeleted)
            {
                MyAppointment app = new()
                    {
                        Start = s.StartDate.Value.UtcDateTime,
                        End = s.EndDate.Value.UtcDateTime,
                        Class = s.Name,
                        Color = colors[i % colors.Length],
                        IsWorkspaceWork = false
                    };
                _appointments.Add(app);
            }
            ++i;
        }
    }

    #region 일정 관련 함수들
    private void ShowAddScheduleDialogButton(MouseEventArgs e)
    {
        isShowAddScheduleDialog = true;
    }

    private async Task AddScheduleButton(MouseEventArgs e)
    {
        newPersonalSchedule.UserId = thisUser.Id;
        newPersonalSchedule.IsSuccess = false;
        await PersonalScheduleRepository.AddPersonalScheduleAsync(newPersonalSchedule, thisUser.Id);

        isShowAddScheduleDialog = false;
        newPersonalSchedule = new();

        await LoadSchedules();
    }

    private void CloseAddScheduleDialogButton(MouseEventArgs e)
    {
        isShowAddScheduleDialog = false;
    }

    async Task ShowScheduleDetail(MyAppointment p)
    {
        var dialog = DialogService.Show<EditAppointmentDialog>("Edit Appointment", new DialogParameters
            {
                ["Appointment"] = p,
            });
        await dialog.Result;

        StateHasChanged();
    }

    private void CloseScheduleDetailDialogButton(MouseEventArgs e)
    {
        isShowScheduleDetail = false;
    }

    private void DeleteScheculeDialogButton(MouseEventArgs e)
    {
        isShowScheduleDetail = false;
    }

    private void UpdateScheduleDialogButton(MouseEventArgs e)
    {
        isShowScheduleDetail = false;
    }
    #endregion
    
}

@page "/Workspaces"

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IWorkspaceRepositoryAsync WorkspaceRepository
@inject IWorkspaceUserRepository WorkspaceUserRepository
@inject NavigationManager NavigationManager

<h1>Your workspaces</h1>
<div class="top-row px-4 auth">
    <button type="button" class="btn btn-primary" @onclick="@ShowDialogButton">Add Workspace</button>
</div>

<br />


<div class="container" style="height:500px; overflow-y: scroll;">
    <table class="table">
        <thead>
            <tr>
                <th>Project Name</th>
                <th>Create Date</th>
            </tr>
        </thead>
        <tbody>
            @if(workspaces == null)
            {
                <div>새로운 작업공간을 추가하시오.</div>
            }
            else {
                @foreach(var w in workspaces)
                {
                    <tr>
                        <td><a href="/WorkspaceDetail/@w.Id">@w.Name</a></td>
                        <td>@w.Created</td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<hr />

@if (isShowDialog) {
    <div class="modal fade show" tabindex="-1" role="dialog" style="display:block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add workspace</h5>
                </div>
                <div class="modal-body">
                    Project name:
                    <input type="text" @bind="@newWorkspace.Name"/>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="SaveWorkspace">Add</button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseDialogButton">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}
@code {
    private ClaimsPrincipal User => (AuthenticationStateProvider.GetAuthenticationStateAsync().Result).User;

    private bool isShowDialog = false;

    private List<Workspace> workspaces = new List<Workspace>();

    private Workspace newWorkspace = new Workspace();

    protected override async Task OnInitializedAsync()
    {
        // AuthenticationStateProvider.GetAuthenticationStateAsync() 메서드는
        // 현재 인증 상태를 나타내는 AuthenticationState 객체를 비동기적으로 반환하는 메서드다.
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        // 관계에서 가져옴
        var tempWorkspaceUsers = await WorkspaceUserRepository.GetWorkspaceUserByUserIdAsync(user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value);

        if(tempWorkspaceUsers.Count == 0)
        {
            workspaces = null;
        }
        else
        {
            foreach(var item in tempWorkspaceUsers)
            {
                var temp = await WorkspaceRepository.GetWorkspaceByIdAsync(item.WorkspaceId);
                workspaces.Add(temp);
            }
        }
    }

    private void ShowDialogButton() {
        isShowDialog = true;
    }

    private void CloseDialogButton() {
        newWorkspace = new Workspace();
        isShowDialog = false;
    }

    private async Task SaveWorkspace() {
        // AuthenticationStateProvider.GetAuthenticationStateAsync() 메서드는 
        // 현재 인증 상태를 나타내는 AuthenticationState 객체를 비동기적으로 반환하는 메서드다.
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        newWorkspace.Created = DateTimeOffset.Now;
        // nameidentifier claim을 찾아 그 값을 CreateUserId에 대입하는 코드
        newWorkspace.CreateUserId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

        await WorkspaceRepository.AddWorkspaceAsync(newWorkspace);

        WorkspaceUser newUserWorkspace = new WorkspaceUser(user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value, newWorkspace.Id);

        await WorkspaceUserRepository.AddWorkspaceUserAsync(newUserWorkspace);

        newWorkspace = new Workspace();
        isShowDialog = false;

        NavigationManager.NavigateTo("/Workspaces", true); // TODO: 다음에 리로딩말고 다시 그리는 방법으로 수정
    }
}

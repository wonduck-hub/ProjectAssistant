@page "/Chat"

@using Microsoft.AspNetCore.SignalR.Client

@inject IJSRuntime JSRuntime

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IWorkspaceRepositoryAsync WorkspaceRepository
@inject IWorkspaceUserRepository WorkspaceUserRepository
@inject IChatRoomRepository ChatRoomRepository
@inject NavigationManager NavigationManager

<h1>Chat</h1>
<hr />
<br />

@if (workspaceUserList.Count == 0)
{
    <div>포함되어 있는 워크스페이스가 없습니다.</div>
}
else
{
    <select class="form-select" @onchange="OnWorkspaceChanged">
        @foreach (var item in workspaceUserList)
        {
            <option value="@item.Workspace.Id">@item.Workspace.Name</option>
        }
    </select>
}
<hr />

<!--디스코드 비슷한 UI 구현-->
<section>
    <div class="container py-5">

        <div class="row">

            <!--채팅 리스트-->
            <div class="col-md-6 col-lg-7 col-xl-8" >

                <ul class="list-unstyled">
                    <li class="d-flex justify-content-between mb-4">
                        <img src="/images/default-user-icon.png" alt="avatar"
                             class="rounded-circle d-flex align-self-start me-3 shadow-1-strong" width="60">
                        <div class="card">
                            <div class="card-header d-flex justify-content-between p-3">
                                <p class="fw-bold mb-0">Brad Pitt</p>
                                <p class="text-muted small mb-0"><i class="far fa-clock"></i> 12 mins ago</p>
                            </div>
                            <div class="card-body">
                                <p class="mb-0">
                                    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut
                                    labore et dolore magna aliqua.
                                </p>
                            </div>
                        </div>
                    </li>
                    <li class="bg-white mb-3">
                        <div data-mdb-input-init class="form-outline">
                            <textarea class="form-control bg-body-tertiary" id="textAreaExample2" rows="4"></textarea>
                            <label class="form-label" for="textAreaExample2">Message</label>
                        </div>
                    </li>
                    <button type="button" data-mdb-button-init data-mdb-ripple-init class="btn btn-info btn-rounded float-end">Send</button>
                </ul>

            </div>

            <!--사이드 리스트(채팅방과 유저 리스트 표시)-->
            <div class="col-md-6 col-lg-5 col-xl-4 mb-4 mb-md-0">
                <!--채팅방 리스트-->
                <h5 class="font-weight-bold mb-3 text-center text-lg-start">chat rooms</h5>
                <div class="card">
                    <div class="card-body">

                        <ul class="list-unstyled mb-0">
                            <li class="p-2 border-bottom bg-body-tertiary">
                                <a href="#!" class="d-flex justify-content-between">
                                    <div class="d-flex flex-row">
                                        <div class="pt-1">
                                            <p class="fw-bold mb-0">John Doe</p>
                                            <p class="small text-muted">Hello, Are you there?</p>
                                        </div>
                                    </div>
                                    <div class="pt-1">
                                        <p class="small text-muted mb-1">Just now</p>
                                        <span class="badge bg-danger float-end">1</span>
                                    </div>
                                </a>
                            </li>
                        </ul>

                    </div>
                </div>
                <!--유저 리스트-->
                <h5 class="font-weight-bold mb-3 text-center text-lg-start">users</h5>
                <div class="card">
                    <div class="card-body">

                        <ul class="list-unstyled mb-0">
                            <li class="p-2 border-bottom bg-body-tertiary">
                                <a href="#!" class="d-flex justify-content-between">
                                    <div class="d-flex flex-row">
                                        <img src="/images/default-user-icon.png" alt="avatar"
                                             class="rounded-circle d-flex align-self-center me-3 shadow-1-strong" width="60">
                                        <div class="pt-1">
                                            <p class="fw-bold mb-0">John Doe</p>
                                            <p class="small text-muted">Hello, Are you there?</p>
                                        </div>
                                    </div>
                                    <div class="pt-1">
                                        <p class="small text-muted mb-1">Just now</p>
                                        <span class="badge bg-danger float-end">1</span>
                                    </div>
                                </a>
                            </li>
                        </ul>

                    </div>
                </div>
            </div>

        </div>

    </div>
</section>

@code {
    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    private HubConnection hubConnection; // SignalR 허브 연결용
    private List<string> messages = new List<string>();
    private string userInput;

    private List<WorkspaceUser> workspaceUserList = new List<WorkspaceUser>();
    private List<WorkspaceUser> selectedWorkspaceUsers = new List<WorkspaceUser>();
    private int? selectedWorkspaceId = null;

    private List<ChatRoom> chatRoomList = null;

    AuthenticationState authState;
    ClaimsPrincipal user;

    protected override async Task OnInitializedAsync()
    {
        // AuthenticationStateProvider.GetAuthenticationStateAsync() 메서드는
        // 현재 인증 상태를 나타내는 AuthenticationState 객체를 비동기적으로 반환하는 메서드다.
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            // 로그인 안된 경우
            NavigationManager.NavigateTo("Identity/Account/Login");
        }

        hubConnection = new HubConnectionBuilder() // 허브 연결
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        // 서버로 부터 받은 메시지 핸들러 등록
        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        await LoadDataAsync();
    }

    protected async Task LoadDataAsync()
    {
        workspaceUserList = await WorkspaceUserRepository.GetWorkspaceUserByUserId(user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value);
        if (workspaceUserList.Count > 0)
        {
            selectedWorkspaceId = workspaceUserList[0].WorkspaceId;
            selectedWorkspaceUsers = await WorkspaceUserRepository.GetWorkspaceUserByWorkspaceId((int)selectedWorkspaceId);
        }
    }

    protected async Task OnWorkspaceChanged(ChangeEventArgs e)
    {
        selectedWorkspaceId = int.Parse(e.Value.ToString());
        selectedWorkspaceUsers = await WorkspaceUserRepository.GetWorkspaceUserByWorkspaceId((int)selectedWorkspaceId);

        // 선택된 워크스페이스를 사용하는 코드
        chatRoomList = await ChatRoomRepository.GetChatRoomByWorkspaceId(selectedWorkspaceId);
    }

    Task SendMessage()
    {
        return hubConnection.SendAsync("SendMessage", "User", userInput);
    }
    // SendMessage() 대신 아래 함수를 사용!
    // public async Task SendMessageToUsers(List<string> userIds, string message)
    // {
    //     await Clients.Users(userIds).SendAsync("ReceiveMessage", message);
    // }

}
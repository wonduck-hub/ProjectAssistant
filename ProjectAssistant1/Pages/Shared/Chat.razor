@page "/Chat"

@using Microsoft.AspNetCore.SignalR.Client

@inject IJSRuntime JSRuntime

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IWorkspaceRepositoryAsync WorkspaceRepository
@inject IWorkspaceUserRepository WorkspaceUserRepository
@inject NavigationManager NavigationManager

<h1>Chat</h1>
<hr />
<br />

@if (workspaceUserList.Count == 0)
{
    <div>포함되어 있는 워크스페이스가 없습니다.</div>
}
else
{
    <select class="form-select" @onchange="OnWorkspaceChanged">
        @foreach (var item in workspaceUserList)
        {
            <option value="@item.Workspace.Id">@item.Workspace.Name</option>
        }
    </select>
}

@code {
    private HubConnection hubConnection; // SignalR 허브 연결용
    private List<string> messages = new List<string>();
    private string userInput;

    private List<WorkspaceUser> workspaceUserList = new List<WorkspaceUser>();
    private List<WorkspaceUser> selectedWorkspaceUsers = new List<WorkspaceUser>();
    private int? selectedWorkspaceId = null;

    AuthenticationState authState;
    ClaimsPrincipal user;

    protected override async Task OnInitializedAsync()
    {
        // AuthenticationStateProvider.GetAuthenticationStateAsync() 메서드는
        // 현재 인증 상태를 나타내는 AuthenticationState 객체를 비동기적으로 반환하는 메서드다.
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            // 로그인 안된 경우
            NavigationManager.NavigateTo("Identity/Account/Login");
        }

        hubConnection = new HubConnectionBuilder() // 허브 연결
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        // 서버로 부터 받은 메시지 핸들러 등록
        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        await LoadDataAsync();
    }

    protected async Task LoadDataAsync()
    {
        workspaceUserList = await WorkspaceUserRepository.GetWorkspaceUserByUserId(user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value);
        if (workspaceUserList.Count > 0)
        {
            selectedWorkspaceId = workspaceUserList[0].WorkspaceId;
            selectedWorkspaceUsers = await WorkspaceUserRepository.GetWorkspaceUserByWorkspaceId((int)selectedWorkspaceId);
        }
    }

    protected async Task OnWorkspaceChanged(ChangeEventArgs e)
    {
        selectedWorkspaceId = int.Parse(e.Value.ToString());
        selectedWorkspaceUsers = await WorkspaceUserRepository.GetWorkspaceUserByWorkspaceId((int)selectedWorkspaceId);

        // 선택된 워크스페이스를 사용하는 코드

    }

    Task SendMessage()
    {
        return hubConnection.SendAsync("SendMessage", "User", userInput);
    }
    // SendMessage() 대신 아래 함수를 사용!
    // public async Task SendMessageToUsers(List<string> userIds, string message)
    // {
    //     await Clients.Users(userIds).SendAsync("ReceiveMessage", message);
    // }


    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;
}
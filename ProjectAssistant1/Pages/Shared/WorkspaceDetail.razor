@page "/WorkspaceDetail/{workspaceId:int}"
@using System.Diagnostics

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

@inject IWorkspaceRepositoryAsync WorkspaceRepository
@inject IWorkListRepository WorkListRepository
@inject IWorkRepository WorkRepository

@if (workspace == null)
{
    <h1>Error</h1>
}
else
{
    <h1>@workspace.Name</h1>
}

<div class="top-row px-4 auth">
    <button type="button" class="btn btn-primary" @onclick="@ShowAddCategoryDialogButton">Add new category</button>
</div>

@if (workListDic == null)
{
    <h4>카테고리가 없습니다.</h4>
}
else
{
    foreach (var item in workListDic)
    {
        <div class="container">
            <section class="mx-auto my-5">
                <div class="card">
                    <div class="card-body">
                        <div class="card-title font-weight-bold">@item.Key.Name</div>
                        
                            @if (item.Value == null)
                            {
                                <div>작업이 없습니다.</div>
                            }
                            else
                            {
                                <table class="table">
                                    <tbody>
                                        @foreach(var v in item.Value)
                                        {
                                            <tr>
                                                <td>@v.Name</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            }
                        <input type="button" class="btn btn-primary" value="Add task" @onclick="@( () => ShowAddWorkDialogButton(item.Key) )" />
                    </div>
                </div>
            </section>
        </div>
    }
}
<div class="top-row px-4 auth">
    <button type="button" class="btn btn-danger" @onclick="@ShowDeleteWorkspaceDialogButton">Delete workspace</button>
</div>


@if (isShowAddCategoryDialog)
{
    <div class="modal fade show" tabindex="-1" role="dialog" style="display:block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add new category</h5>
                </div>
                <div class="modal-body">
                    Category name:
                    <input type="text" @bind="@newWorkList.Name" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="AddWorkList">Add</button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseAddCategoryDialogButton">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}

@if (isShowAddWorkDialog)
{
    <div class="modal fade show" tabindex="-1" role="dialog" style="display:block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add new work</h5>
                </div>
                <div class="modal-body">
                    Work name:
                    <input type="text" @bind="newWork.Name" />
                    <br />
                    Work detail:<br />
                    <textarea @bind="newWork.TaskDetails" rows="5" cols="35" placeholder="Detail..." style="resize:none;"></textarea>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="AddWorks">Add</button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseAddWorkDialogButton">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}

@if (isShowDeleteWorkspaceDialog)
{
    <div class="modal fade show" tabindex="-1" role="dialog" style="display:block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">정말로 삭제 하시겠습니까?</h5>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" @onclick="DeleteWorkspace">Yes</button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteWorkspaceDialogButton">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}

@code {
    [Parameter]
    public int WorkspaceId { get; set; }

    private Workspace workspace;

    private bool isShowAddCategoryDialog = false;

    private bool isShowAddWorkDialog = false;

    private WorkList newWorkList = new WorkList();

    private Work newWork = new Work();

    private WorkList selectedWorkList = new WorkList();

    private Dictionary<WorkList, List<Work>> workListDic = new Dictionary<WorkList, List<Work>>();

    private bool isShowDeleteWorkspaceDialog = false;

    AuthenticationState authState;
    ClaimsPrincipal user;

    protected override async Task OnInitializedAsync()
    {
        // AuthenticationStateProvider.GetAuthenticationStateAsync() 메서드는
        // 현재 인증 상태를 나타내는 AuthenticationState 객체를 비동기적으로 반환하는 메서드다.
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        workspace = await WorkspaceRepository.GetWorkspaceByIdAsync(WorkspaceId);

        await ReloadWorkListDic();
    }

    private async Task ReloadWorkListDic()
    {
        workListDic = new Dictionary<WorkList, List<Work>>();

        List<WorkList> tempWorkLists = new List<WorkList>();
        tempWorkLists = await WorkListRepository.GetWorkListsByWorkspaceIdAsync(workspace.Id);

        foreach (var item in tempWorkLists)
        {
            List<Work> tempWorks = await WorkRepository.GetWorkByListIdAsync(item.Id);
            workListDic.Add(item, tempWorks);
        }
    }

    private void ShowAddCategoryDialogButton()
    {
        isShowAddCategoryDialog = true;
    }

    private void CloseAddCategoryDialogButton()
    {
        newWorkList = new WorkList();
        isShowAddCategoryDialog = false;
    }

    private async Task AddWorkList(MouseEventArgs e)
    {

        newWorkList.Created = DateTimeOffset.Now;
        // nameidentifier claim을 찾아 그 값을 CreateUserId에 대입하는 코드
        newWorkList.CreateUserId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        newWorkList.WorkspaceId = workspace.Id;

        await WorkListRepository.AddWorkListAsync(newWorkList);

        newWorkList = new WorkList();
        isShowAddCategoryDialog = false;

        await ReloadWorkListDic();
    }
    private async Task AddWorks()
    {
        newWork.Created = DateTimeOffset.Now;
        newWork.CreateUserId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        newWork.ListId = selectedWorkList.Id;

        await WorkRepository.AddWorkAsync(newWork);

        newWork = new Work();
        isShowAddWorkDialog = false;

        await ReloadWorkListDic();
    }

    private void ShowDeleteWorkspaceDialogButton()
    {
        isShowDeleteWorkspaceDialog = true;
    }

    private void CloseDeleteWorkspaceDialogButton()
    {
        isShowDeleteWorkspaceDialog = false;
    }

    private async Task DeleteWorkspace()
    {
        await WorkspaceRepository.DeleteWorkspace(WorkspaceId);

        isShowDeleteWorkspaceDialog = false;

        NavigationManager.NavigateTo("/Index");
    }

    private void ShowAddWorkDialogButton(WorkList WorkList)
    {
        Debug.Assert(WorkList != null, "WorkList is null");
        selectedWorkList = WorkList;
        isShowAddWorkDialog = true;
    }

    private void CloseAddWorkDialogButton()
    {
        newWork = new Work();
        isShowAddWorkDialog = false;
    }
}

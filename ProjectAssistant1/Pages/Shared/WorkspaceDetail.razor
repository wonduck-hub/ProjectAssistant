@page "/WorkspaceDetail/{workspaceId:int}"
@using System.Diagnostics
@using BlazorDateRangePicker

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

@inject IWorkspaceRepositoryAsync WorkspaceRepository
@inject IWorkListRepository WorkListRepository
@inject IWorkRepository WorkRepository
@inject IUserRepositoryAsync UserRepository
@inject IWorkspaceUserRepository WorkspaceUserRepository
@inject IUserWorkRepository UserWorkRepository
@inject IWorkspaceWorkRepository WorkspaceWorkRepository

@if (workspace == null)
{
    <h1>Error</h1>
}
else
{
    <h1>@workspace.Name</h1>
}

<div class="top-row px-4 auth">
    <div style="margin-right:10px" @onclick="ShowAddUserDialog">
        <img src="/images/plus-user.png" width="25" hight="25"/>
        User
    </div>
    <button type="button" class="btn btn-primary" @onclick="@ShowAddCategoryDialogButton">Add new category</button>
</div>

@if (workListDic == null)
{
    <h4>카테고리가 없습니다.</h4>
}
else
{
    foreach (var item in workListDic)
    {
        @if (!item.Key.IsDeleted)
        {
            <div class="container">
                <section class="mx-auto my-5">
                    <div class="card">
                        <div class="card-body">
                            <div class="card-title font-weight-bold d-flex justify-content-between align-items-center">
                                <input class="category-name" @onchange="@(e => UpdateCategory(e, item.Key))" value="@item.Key.Name"></input>
                                <img src="/images/trash.png" width="20" hight="20" @onclick="@( () => DeleteCategoryButton(item.Key) )"></img>
                            </div>
                            

                            @if (item.Value == null)
                            {
                                <div>작업이 없습니다.</div>
                            }
                            else
                            {
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th class="table-name">
                                                작업 이름
                                            </th>
                                            <th class="table-status">
                                                상태
                                            </th>
                                            <th>기간</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var v in item.Value)
                                        {
                                            @if (!v.IsDeleted)
                                            {
                                                <tr @onclick="@( () => ShowWorkDetail(v) )">
                                                    <td class="table-name">@v.Name</td>
                                                    
                                                    @if (!v.IsSuccess)
                                                    {
                                                        @if (DateTime.Now < v.StartDate)
                                                        {
                                                            <td class="table-status table-primary">
                                                                작업 전
                                                            </td>
                                                        }
                                                        else if (v.StartDate <= DateTime.Now && DateTime.Now <= v.EndDate)
                                                        {
                                                            <td class="table-status table-warning">
                                                                작업 중
                                                            </td>
                                                        }
                                                        else if (v.EndDate < DateTime.Now)
                                                        {
                                                            <td class="table-status table-danger">
                                                                기간 종료
                                                            </td>
                                                        }
                                                        else
                                                        {
                                                            <td class="table-status">
                                                                오류
                                                            </td>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <td class="table-success">
                                                            완료
                                                        </td>
                                                    }
                                                    @if (v.StartDate.HasValue && v.EndDate.HasValue)
                                                    {
                                                        <td>@v.StartDate.Value.ToString("yyyy/MM/dd") ~ @v.EndDate.Value.ToString("yyyy/MM/dd")</td>
                                                    }
                                                    else
                                                    {
                                                        <td>오류</td>
                                                    }
                                                </tr>
                                            }
                                        }
                                    </tbody>
                                </table>
                            }
                            <input type="button" class="btn btn-primary" value="Add task" @onclick="@( () => ShowAddWorkDialogButton(item.Key) )" />
                        </div>
                    </div>
                </section>
            </div>
        }
    }
}
<div class="top-row px-4 auth">
    <button type="button" class="btn btn-danger" @onclick="@ShowDeleteWorkspaceDialogButton">Delete workspace</button>
</div>

@if (isShowWorkDetail)
{
    <div class="modal fade show" tabindex="-1" role="dialog" style="display:block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Detail</h5>
                </div>
                <div class="modal-body">
                    <label>작업 이름:</label>
                    <input type="text" @bind="@selectedWork.Name" />
                    <br />
                    <label>기간:</label>
                    <DateRangePicker @bind-StartDate="@selectedWork.StartDate" @bind-EndDate="@selectedWork.EndDate"/>
                    <br />
                    <label>설명:</label>
                    <br />
                    <textarea @bind="@selectedWork.TaskDetails" rows="5" cols="35" placeholder="Detail..." style="resize:none;"></textarea>
                    <br />
                    <label>멤버:</label>
                    <ul class="list-group">
                        @foreach (var u in selectedWorkMemberUserWork)
                        {
                            <li class="list-group-item list-group-item-action" @onclick="@( () => DeleteWorkMember(u) )">@u.User.UserName</li>
                        }
                    </ul>
                    <label>추가:</label>
                    <ul class="list-group">
                        @foreach (var u in workspaceUserList)
                        {
                            <li class="list-group-item list-group-item-action" @onclick="@( () => AddWorkMember(u) )">@u.User.UserName</li>
                        }
                    </ul>
                    <br />
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" @bind="selectedWork.IsSuccess" />
                        <label class="form-check-label" >완료</label>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" @onclick="@( () => DeleteWorkDialogButton() )">Delete</button>
                    <button type="button" class="btn btn-success" @onclick="@( () => UpdateWorkDialogButton() )">Save</button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseWorkDetailDialogButton">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}

@if (isShowAddCategoryDialog)
{
    <div class="modal fade show" tabindex="-1" role="dialog" style="display:block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add new category</h5>
                </div>
                <div class="modal-body">
                    Category name:
                    <input type="text" @bind="@newWorkList.Name" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="AddWorkList">Add</button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseAddCategoryDialogButton">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}

@if (isShowAddWorkDialog)
{
    <div class="modal fade show" tabindex="-1" role="dialog" style="display:block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add new work</h5>
                </div>
                <div class="modal-body">
                    <label>작업 이름:</label>
                    <input type="text" @bind="newWork.Name" />
                    <br />
                    <label>작업 기간:</label>
                    <DateRangePicker @bind-StartDate="newWork.StartDate" @bind-EndDate="newWork.EndDate"/>
                    <br />
                    <label>설명:</label>
                    <br />
                    <textarea @bind="newWork.TaskDetails" rows="5" cols="35" placeholder="Detail..." style="resize:none;"></textarea>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="AddWorks">Add</button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseAddWorkDialogButton">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}

@if (isShowDeleteWorkspaceDialog)
{
    <div class="modal fade show" tabindex="-1" role="dialog" style="display:block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">정말로 삭제 하시겠습니까?</h5>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" @onclick="DeleteWorkspace">Yes</button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteWorkspaceDialogButton">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}

@if (isShowAddUserDialog)
{
    <div class="modal fade show" tabindex="-1" role="dialog" style="display:block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Join user</h5>
                </div>
                <div class="modal-body">
                    User name:
                    <input type="text" @onchange="@( e => SearchUser(e))" placeholder="Enter user name..." />
                    <br />
                    <hr />
                    @if(searchedUser == null)
                    {
                        <div>해당 이름의 유저 없음.</div>
                    }
                    else
                    {
                        <div>
                            Name: @searchedUser.UserName <br />
                            Email: @searchedUser.Email<br />
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" disabled="@disableAddUserButton" @onclick="AddUser">Add</button>
                    <button type="button" class="btn btn-danger" disabled="@disableDeleteUserButton" @onclick="DeleteUser">Delete</button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseAddUserDialog">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}

@code {
    #region 변수들
    [Parameter]
    public int WorkspaceId { get; set; }

    private Workspace workspace;

    private bool isShowAddCategoryDialog = false;

    private bool isShowAddWorkDialog = false;

    private WorkList newWorkList = null;

    private Work newWork = null;

    private WorkList selectedWorkList = null;

    private Dictionary<WorkList, List<Work>> workListDic = new Dictionary<WorkList, List<Work>>();

    private bool isShowDeleteWorkspaceDialog = false;

    private bool isShowWorkDetail = false;

    private Work selectedWork = null;

    private bool isShowAddUserDialog = false;

    private bool disableAddUserButton = true;

    private bool disableDeleteUserButton = true;

    private User searchedUser = null;

    private List<WorkspaceUser> workspaceUserList = null;

    private List<UserWork> selectedWorkMemberUserWork = null;

    AuthenticationState authState;
    ClaimsPrincipal user;

    #endregion

    protected override async Task OnInitializedAsync()
    {
        // AuthenticationStateProvider.GetAuthenticationStateAsync() 메서드는
        // 현재 인증 상태를 나타내는 AuthenticationState 객체를 비동기적으로 반환하는 메서드다.
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        workspace = await WorkspaceRepository.GetWorkspaceByIdAsync(WorkspaceId);

        await ReloadData();
    }

    private async Task ReloadData()
    {
        #region WorkListDic
        workListDic = new Dictionary<WorkList, List<Work>>();

        List<WorkList> tempWorkLists = null;
        tempWorkLists = await WorkListRepository.GetWorkListsByWorkspaceIdAsync(workspace.Id);

        foreach (var item in tempWorkLists)
        {
            List<Work> tempWorks = await WorkRepository.GetWorkByListIdAsync(item.Id);
            workListDic.Add(item, tempWorks);
        }
        #endregion

        #region WorkspaceUserList
        workspaceUserList = await WorkspaceUserRepository.GetWorkspaceUserByWorkspaceId(WorkspaceId);
        #endregion

        #region Work에 할당된 User들

        #endregion
    }

    private async Task AddWorkList(MouseEventArgs e)
    {

        newWorkList.Created = DateTimeOffset.Now;
        // nameidentifier claim을 찾아 그 값을 CreateUserId에 대입하는 코드
        newWorkList.CreateUserId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        newWorkList.WorkspaceId = workspace.Id;

        await WorkListRepository.AddWorkListAsync(newWorkList);

        newWorkList = null;
        isShowAddCategoryDialog = false;

        await ReloadData();
    }

    #region 작업에 유저 할당
    public async Task AddWorkMember(WorkspaceUser wu)
    {
        UserWork newUserWork = new UserWork(selectedWork.Id, wu.User.Id, WorkspaceId);
        await UserWorkRepository.AddUserWorkAsync(newUserWork);

        selectedWorkMemberUserWork = await UserWorkRepository.GetUserWorkByWorkIdAsync(selectedWork.Id);
    }

    public async Task DeleteWorkMember(UserWork wu)
    {
        await UserWorkRepository.RemoveUserWorkAsync(wu.UserId, wu.WorkId, wu.WorkspaceId);

        selectedWorkMemberUserWork = await UserWorkRepository.GetUserWorkByWorkIdAsync(selectedWork.Id);
    }
    #endregion

    #region 카테고리
    private void ShowAddCategoryDialogButton()
    {
        newWorkList = new WorkList();
        isShowAddCategoryDialog = true;
    }

    private void CloseAddCategoryDialogButton()
    {
        newWorkList = null;
        isShowAddCategoryDialog = false;
    }

    private async Task DeleteCategoryButton(WorkList wl)
    {
        await WorkListRepository.DeleteWorkListById(wl.Id);

        await ReloadData();
    }

    private async Task UpdateCategory(ChangeEventArgs e, WorkList wl)
    {
        wl.Name = e.Value.ToString();
        await WorkListRepository.UpdateWorkListAsync(wl);

        await ReloadData();
    }
    #endregion

    #region Work
    private async Task AddWorks()
    {

        newWork.Created = DateTimeOffset.Now;
        newWork.CreateUserId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        newWork.ListId = selectedWorkList.Id;

        await WorkRepository.AddWorkAsync(newWork);
        await WorkspaceWorkRepository.AddWorkspaceWorkAsync(new WorkspaceWork(newWork.Id, WorkspaceId));

        newWork = null;
        isShowAddWorkDialog = false;

        await ReloadData();
    }

    private void ShowDeleteWorkspaceDialogButton()
    {
        isShowDeleteWorkspaceDialog = true;
    }

    private void CloseDeleteWorkspaceDialogButton()
    {
        isShowDeleteWorkspaceDialog = false;
        newWork = null;
        isShowAddWorkDialog = false;
    }

    private async Task DeleteWorkspace()
    {
        await WorkspaceRepository.DeleteWorkspaceById(WorkspaceId);

        isShowDeleteWorkspaceDialog = false;

        NavigationManager.NavigateTo("/Index");
    }

    private void ShowAddWorkDialogButton(WorkList WorkList)
    {
        Debug.Assert(WorkList != null, "WorkList is null");
        newWork = new Work();
        selectedWorkList = WorkList;
        isShowAddWorkDialog = true;
    }

    private async Task ShowWorkDetail(Work w)
    {
        selectedWork = w;
        selectedWorkMemberUserWork = await UserWorkRepository.GetUserWorkByWorkIdAsync(w.Id);
        isShowWorkDetail = true;
    }

    private void CloseWorkDetailDialogButton()
    {
        selectedWork = new Work();
        isShowWorkDetail = false;
    }

    private async Task UpdateWorkDialogButton()
    {
        await WorkRepository.UpdateWorkAsync(selectedWork);

        selectedWork = new Work();
        isShowWorkDetail = false;

        await ReloadData();
    }

    private async Task DeleteWorkDialogButton()
    {
        await WorkspaceWorkRepository.RemoveWorkspaceWorkAsync(selectedWork.Id, WorkspaceId);
        await WorkRepository.DeleteWorkById(selectedWork.Id);

        selectedWork = new Work();
        isShowWorkDetail = false;

        await ReloadData();
    }

    private void CloseAddWorkDialogButton()
    {
        newWork = new Work();
        isShowAddWorkDialog = false;
    }
    #endregion

    #region AddUser
    private void ShowAddUserDialog()
    {
        isShowAddUserDialog = true;
        disableAddUserButton = true;
        disableDeleteUserButton = true;
    }

    private void CloseAddUserDialog()
    {
        isShowAddUserDialog = false;
        searchedUser = null;
        disableAddUserButton = true;
        disableDeleteUserButton = true;
    }

    private async Task AddUser()
    {
        Debug.Assert(searchedUser != null);
        Debug.Assert(searchedUser.Id != null);

        WorkspaceUser wu = new WorkspaceUser(searchedUser.Id, WorkspaceId);
        await WorkspaceUserRepository.AddWorkspaceUserAsync(wu);

        searchedUser = null;

        await ReloadData();

        isShowAddUserDialog = false;
    }

    private async Task DeleteUser()
    {
        Debug.Assert(searchedUser != null);
        Debug.Assert(searchedUser.Id != null);

        await WorkspaceUserRepository.RemoveWorkspaceUserAsync(searchedUser.Id, WorkspaceId);

        searchedUser = null;

        await ReloadData();

        isShowAddUserDialog = false;
    }

    private async Task SearchUser(ChangeEventArgs e)
    {
        searchedUser =  await UserRepository.GetFirstUserByName(e.Value.ToString());

        if (searchedUser == null)
        {
            disableAddUserButton = true;
            disableDeleteUserButton = true;
        }
        else
        {
            disableAddUserButton = false;
            disableDeleteUserButton = false;
        }
    }

    #endregion
    
}

@page "/Dashboard"

@inject AuthenticationStateProvider AuthenticationStateProvider

@inject IWorkspaceRepositoryAsync WorkspaceRepository
@inject IWorkListRepository WorkListRepository
@inject IWorkRepository WorkRepository
@inject IUserRepositoryAsync UserRepository
@inject IWorkspaceUserRepository WorkspaceUserRepository
@inject IUserWorkRepository UserWorkRepository
@inject IWorkspaceWorkRepository WorkspaceWorkRepository

<h3>Dashboard</h3>
<hr />

@if (workspaceUserList == null || workStatusBarChart == null)
{
    <div>로딩중...</div>
}
else if (workspaceUserList.Count == 0)
{
    <div>포함된 워크스페이스가 없습니다.</div>
}
else
{
    <select @onchange="OnWorkspaceChanged">
        @foreach(var item in workspaceUserList)
        {
            <option value="@item.Workspace.Id">@item.Workspace.Name</option>
        }
    </select>
}

<BarChart @ref="workStatusBarChart" Height="300" Class="mb-4" />

@code {
    private List<UserWork> userWorkList = null;
    private List<WorkspaceUser> workspaceUserList = null;
    private int selectedWorkspaceId;

    private BarChart workStatusBarChart = null;
    private BarChartOptions workStatusBarChartOptions = default!;
    private ChartData workStatusBarChartData = default!;

    private Random random = new();

    AuthenticationState authState;
    ClaimsPrincipal user;

    protected override async Task OnInitializedAsync()
    {
        // AuthenticationStateProvider.GetAuthenticationStateAsync() 메서드는
        // 현재 인증 상태를 나타내는 AuthenticationState 객체를 비동기적으로 반환하는 메서드다.
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        // 로드 데이터
        await LoadDataAsync();

        // 차트 설정
        await SettingWorkStatusBarChart();
    }

    protected async Task SettingWorkStatusBarChart()
    {
        // 차트
        var labels = new List<string> { "작업 전", "작업 중", "작업 종료", "완료" };
        var datasets = new List<IChartDataset>();

        var tempWorkspaceWorkList = await WorkspaceWorkRepository.GetWorkspaceWorkByWorkspaceIdAsync(selectedWorkspaceId);

        var dataset1 = new BarChartDataset()
            {
                Data = new List<double> {0, 0, 0, 0},
                BackgroundColor = new List<string> { ColorBuilder.CategoricalTwelveColors[1], 
                                                        ColorBuilder.CategoricalTwelveColors[2], 
                                                        ColorBuilder.CategoricalTwelveColors[3], 
                                                        ColorBuilder.CategoricalTwelveColors[0] },
                BorderColor = new List<string> { ColorBuilder.CategoricalTwelveColors[1],
                                                    ColorBuilder.CategoricalTwelveColors[2],
                                                    ColorBuilder.CategoricalTwelveColors[3],
                                                    ColorBuilder.CategoricalTwelveColors[0] },
                BorderWidth = new List<double> { 0 },
            };
        foreach(var ww in tempWorkspaceWorkList)
        {
            if (ww.Work.IsSuccess)
            {
                dataset1.Data[3]++;
            }
            else
            {
                if (DateTime.Now < ww.Work.StartDate)
                {
                    dataset1.Data[0]++;
                }
                else if (ww.Work.StartDate < DateTime.Now && DateTime.Now < ww.Work.EndDate)
                {
                    dataset1.Data[1]++;
                }
                else if (ww.Work.EndDate < DateTime.Now)
                {
                    dataset1.Data[2]++;
                }
            }
        }
        datasets.Add(dataset1);

        workStatusBarChartData = new ChartData
            {
                Labels = labels,
                Datasets = datasets
            };

        workStatusBarChartOptions = new BarChartOptions();
        workStatusBarChartOptions.Responsive = true;
        workStatusBarChartOptions.Interaction = new Interaction { Mode = InteractionMode.Y };
        workStatusBarChartOptions.IndexAxis = "y";

        workStatusBarChartOptions.Scales.X!.Title!.Text = "수";
        workStatusBarChartOptions.Scales.X.Max = (double)Math.Max(Math.Max(dataset1.Data[0], dataset1.Data[1]), Math.Max(dataset1.Data[2], dataset1.Data[3])) + 2.0f;
        workStatusBarChartOptions.Scales.X.Title.Display = true;

        workStatusBarChartOptions.Scales.Y!.Title!.Text = "작업 상태";
        workStatusBarChartOptions.Scales.Y.Title.Display = true;

        workStatusBarChartOptions.Plugins.Legend.Display = false;

    }

    protected async Task LoadDataAsync()
    {
        userWorkList = await UserWorkRepository.GetUserWorkByUserIdAsync(user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value);
        workspaceUserList = await WorkspaceUserRepository.GetWorkspaceUserByUserId(user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value);
        selectedWorkspaceId = workspaceUserList[0].WorkspaceId;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await workStatusBarChart.InitializeAsync(workStatusBarChartData, workStatusBarChartOptions);
        }
        else
        {
            await workStatusBarChart.InitializeAsync(workStatusBarChartData, workStatusBarChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    protected async Task OnWorkspaceChanged(ChangeEventArgs e)
    {
        selectedWorkspaceId = int.Parse(e.Value.ToString());
        // 선택된 워크스페이스를 사용하는 코드

        await SettingWorkStatusBarChart();

        await workStatusBarChart.UpdateAsync(workStatusBarChartData, workStatusBarChartOptions);
    }
}
